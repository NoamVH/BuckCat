name: Build and Push Image to GCR

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
      - feature/cicd
    paths:
      - .github/workflows/ci-pipeline.yaml

env:
  GCP_REGION: us-east1
  BUCKCAT_REGISTRY: 

jobs:
  Build_and_Push_to_GAR:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Authenticate to GCP
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{secrets.PROJECT_ID}}
          workload_identity_provider: projects/765231548917/locations/global/workloadIdentityPools/buckcat-workload-identity-pool/providers/buckcat-github
      -
        name: Login to GCR
        id: gcr-login
        uses: docker/login-action@v3
        with:
          username: oauth2accesstoken
          password: ${{steps.gcp-auth.outputs.access_token}}
          registry: ${{env.GCP_REGION}}-docker.pkg.dev/${{secrets.PROJECT_ID}}/buckcat-registry
      -
        name: Build, tag, and push the Front-End Docker Image to GCR
        id: build-frontend-image
        env:
          IMAGE: ./FrontEnd
          PROJECT_ID: ${{secrets.PROJECT_ID}}
        run: |
          docker compose build
      # -
      #   name: Build, tag, and push the Back-End Docker Image to Amazon ECR, then delete all untagged images
      #   id: Build-Image-BackEnd
      #   env:
      #     IMAGE: ./BackEnd
      #     REGISTRY: ${{ steps.logic-ecr-outputs.registry }}
      #     REPOSITORY: ${{ secrets.AWS_ECR_REGISTRY }}
      #     IMAGE_TAG: backend-latest
      #   run: |
      #     docker build -t ${{ secrets.AWS_ECR_REGISTRY }}:$IMAGE_TAG $IMAGE
      #     docker push ${{ secrets.AWS_ECR_REGISTRY }}:$IMAGE_TAG
      #     IMAGES_TO_DELETE=$( aws ecr list-images --region ${{ env.AWS_REGION }} --repository-name buck-cat --filter "tagStatus=UNTAGGED" --query 'imageIds[]' --output json )
      #     aws ecr batch-delete-image --region ${{ env.AWS_REGION }} --repository-name buck-cat --image-ids "$IMAGES_TO_DELETE" || true
